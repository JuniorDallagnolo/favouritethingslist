{"version":3,"sources":["ModalForm.js","App.js","serviceWorker.js","index.js"],"names":["ModalForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","character","game","handleSubmit","bind","assertThisInitialized","handleChange","toggle","setState","ev","preventDefault","handleToUpdate","defineProperty","target","name","value","react_default","a","createElement","react","reactstrap_es","color","onClick","buttonLabel","isOpen","className","onSubmit","for","type","id","placeholder","onChange","Component","App","list","entry","Date","now","newList","push","filter","obj","console","log","_this2","ModalForm_ModalForm","map","item","sm","key","body","removeItem","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.78f61cf6.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nexport default class ModalForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { modal: false, character: \"\", game: \"\" };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ modal: !this.state.modal });\n  }\n\n  handleSubmit(ev) {\n    ev.preventDefault();\n    this.props.handleToUpdate(this.state);\n    this.setState({ character: \"\", game: \"\" });\n    this.toggle();\n  }\n\n  handleChange(ev) {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Button color=\"primary\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.toggle}>Add Character</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <Label for=\"characterName\">Character</Label>\n                <Input\n                  type=\"text\"\n                  name=\"character\"\n                  id=\"characterName\"\n                  placeholder=\"Favourite Character?\"\n                  onChange={this.handleChange}\n                  value={this.state.character}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"gameName\">Game</Label>\n                <Input\n                  type=\"text\"\n                  name=\"game\"\n                  id=\"gameName\"\n                  placeholder=\"From which game?\"\n                  onChange={this.handleChange}\n                  value={this.state.game}\n                />\n              </FormGroup>\n              <ModalFooter>\n                <Button color=\"success\">Add to List</Button>\n              </ModalFooter>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport {\n  Jumbotron,\n  Button,\n  Row,\n  Col,\n  Card,\n  CardTitle,\n  CardText\n} from \"reactstrap\";\nimport ModalForm from \"./ModalForm\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: []\n    };\n    this.handleToUpdate = this.handleToUpdate.bind(this);\n  }\n\n  handleToUpdate(entry) {\n    entry.id = Date.now();\n    let newList = this.state.list;\n    newList.push(entry);\n    this.setState({\n      list: newList\n    });\n  }\n\n  removeItem(id) {\n    let newList = this.state.list.filter(obj => {\n      return obj.id !== id;\n    });\n    this.setState({\n      list: newList\n    });\n  }\n\n  editItem(id) {\n    console.log(id);\n  }\n\n  componentDidMount() {\n    console.log(this.state.list);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Jumbotron>\n          <h1 className=\"display-3\"> Favourite Video Game Character</h1>\n          <p className=\"lead\">\n            This is a single-page React App that allows CRUD operations on a\n            List of things.\n          </p>\n          <hr className=\"my-2\" />\n          <p>\n            Click the Button to add your favourite videogame character to the\n            list\n          </p>\n          <p className=\"lead\">\n            <ModalForm\n              buttonLabel=\"Add Character\"\n              handleToUpdate={this.handleToUpdate}\n            />\n          </p>\n        </Jumbotron>\n        <Row>\n          {this.state.list.map(item => {\n            return (\n              <Col sm=\"6\" key={item.id}>\n                <Card body>\n                  <CardTitle>{item.character}</CardTitle>\n                  <CardText>From {item.game}</CardText>\n                  <Button\n                    color=\"danger\"\n                    onClick={() => {\n                      this.removeItem(item.id);\n                    }}\n                  >\n                    Remove\n                  </Button>\n                  {/* <Button\n                    color=\"secondary\"\n                    onClick={() => {\n                      this.editItem(item.id);\n                    }}\n                  >\n                    Edit\n                  </Button> */}\n                </Card>\n              </Col>\n            );\n          })}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}