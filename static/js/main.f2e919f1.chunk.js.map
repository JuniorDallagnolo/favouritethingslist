{"version":3,"sources":["components/AddForm.js","components/Header.js","components/Item.js","components/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["AddForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","id","character","game","handleSubmit","bind","assertThisInitialized","handleChange","toggle","setState","ev","preventDefault","newEntry","Date","now","handleToUpdate","defineProperty","target","name","value","react_default","a","createElement","react","reactstrap_es","color","onClick","buttonLabel","isOpen","className","onSubmit","for","type","placeholder","onChange","Component","Header","Item","handleSave","isEdit","handleEdit","item","_this2","sm","body","removeItem","ListContainer","list","map","Item_Item","key","App","entry","el","assign","newList","push","console","log","filter","obj","Header_Header","AddForm_AddForm","ListContainer_ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f2e919f1.chunk.js","sourcesContent":["import React, { Component, Fragment } from \"react\";\nimport {\n  Button,\n  Modal,\n  ModalHeader,\n  ModalBody,\n  ModalFooter,\n  Form,\n  FormGroup,\n  Label,\n  Input\n} from \"reactstrap\";\n\nexport default class AddForm extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { modal: false, id: \"\", character: \"\", game: \"\" };\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  toggle() {\n    this.setState({ modal: !this.state.modal });\n  }\n\n  handleSubmit(ev) {\n    ev.preventDefault();\n    let newEntry = this.state;\n    newEntry.id = Date.now();\n    this.props.handleToUpdate(newEntry);\n    this.setState({ character: \"\", game: \"\" });\n    this.toggle();\n  }\n\n  handleChange(ev) {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    });\n  }\n\n  render() {\n    return (\n      <Fragment>\n        <Button color=\"primary\" onClick={this.toggle}>\n          {this.props.buttonLabel}\n        </Button>\n        <Modal\n          isOpen={this.state.modal}\n          toggle={this.toggle}\n          className={this.props.className}\n        >\n          <ModalHeader toggle={this.toggle}>Add Character</ModalHeader>\n          <ModalBody>\n            <Form onSubmit={this.handleSubmit}>\n              <FormGroup>\n                <Label for=\"characterName\">Character</Label>\n                <Input\n                  type=\"text\"\n                  name=\"character\"\n                  id=\"characterName\"\n                  placeholder=\"Favourite Character?\"\n                  onChange={this.handleChange}\n                  value={this.state.character}\n                />\n              </FormGroup>\n              <FormGroup>\n                <Label for=\"gameName\">Game</Label>\n                <Input\n                  type=\"text\"\n                  name=\"game\"\n                  id=\"gameName\"\n                  placeholder=\"From which game?\"\n                  onChange={this.handleChange}\n                  value={this.state.game}\n                />\n              </FormGroup>\n              <ModalFooter>\n                <Button color=\"success\">Add to List</Button>\n              </ModalFooter>\n            </Form>\n          </ModalBody>\n        </Modal>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport { Jumbotron } from \"reactstrap\";\n\nexport default class Header extends Component {\n  render() {\n    return (\n      <Fragment>\n        <Jumbotron>\n          <h1 className=\"display-3\"> Favourite Video Game Character</h1>\n          <p className=\"lead\">\n            This is a single-page React App that allows CRUD operations on a\n            List of things.\n          </p>\n        </Jumbotron>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component, Fragment } from \"react\";\nimport {\n  Col,\n  Card,\n  Button,\n  CardTitle,\n  CardText,\n  Form,\n  Input,\n  FormGroup\n} from \"reactstrap\";\n\nexport default class Item extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: this.props.item.id,\n      character: this.props.item.character,\n      game: this.props.item.game,\n      isEdit: false\n    };\n  }\n\n  handleChange = ev => {\n    this.setState({\n      [ev.target.name]: ev.target.value\n    });\n  };\n\n  handleSave = ev => {\n    ev.preventDefault();\n    this.props.handleToUpdate(this.state);\n    this.setState({\n      isEdit: false\n    });\n  };\n\n  handleEdit = ev => {\n    this.setState({\n      isEdit: true\n    });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <Col sm=\"6\">\n          <Card body>\n            {!this.state.isEdit && (\n              <Fragment>\n                <CardTitle>{this.state.character}</CardTitle>\n                <CardText>From {this.state.game}</CardText>\n                <Button\n                  color=\"danger\"\n                  onClick={() => {\n                    this.props.removeItem(this.state.id);\n                  }}\n                >\n                  Remove\n                </Button>\n                <Button\n                  color=\"secondary\"\n                  onClick={() => {\n                    this.handleEdit(this.state.id);\n                  }}\n                >\n                  Edit\n                </Button>\n              </Fragment>\n            )}\n            {this.state.isEdit && (\n              <Form>\n                <FormGroup>\n                  <Input\n                    type=\"text\"\n                    name=\"character\"\n                    id=\"characterName\"\n                    onChange={this.handleChange}\n                    value={this.state.character}\n                  />\n                </FormGroup>\n                <FormGroup>\n                  <Input\n                    type=\"text\"\n                    name=\"game\"\n                    id=\"gameName\"\n                    onChange={this.handleChange}\n                    value={this.state.game}\n                  />\n                </FormGroup>\n                <Button onClick={this.handleSave} color=\"success\">\n                  Save\n                </Button>\n              </Form>\n            )}\n          </Card>\n        </Col>\n      </Fragment>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport Item from \"./Item\";\nimport { Row, Container } from \"reactstrap\";\n\nexport default class ListContainer extends Component {\n  render() {\n    return (\n      <Container className=\"pr-0\">\n        <h5 className=\"text-center\">\n          <u>List of Characters</u>\n        </h5>\n        <Row>\n          {this.props.list.map(item => {\n            return (\n              <Item\n                key={item.id}\n                item={item}\n                removeItem={this.props.removeItem}\n                handleToUpdate={this.props.handleToUpdate}\n              />\n            );\n          })}\n        </Row>\n      </Container>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport AddForm from \"./components/AddForm\";\nimport Header from \"./components/Header\";\nimport ListContainer from \"./components/ListContainer\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      list: [\n        {\n          id: Date.now(),\n          character: \"Link\",\n          game: \"Zelda\",\n          isEdit: false\n        },\n        {\n          id: Date.now() + 100,\n          character: \"Lans\",\n          game: \"Tactics Ogre\",\n          isEdit: false\n        }\n      ]\n    };\n  }\n\n  handleToUpdate = entry => {\n    if (entry.isEdit) {\n      this.setState({\n        list: this.state.list.map(\n          el => (el.id === entry.id ? Object.assign({}, entry) : el)\n        )\n      });\n    } else {\n      let newList = this.state.list;\n      newList.push(entry);\n      this.setState({\n        list: newList\n      });\n    }\n  };\n\n  removeItem = id => {\n    console.log(id);\n    let newList = this.state.list.filter(obj => {\n      return obj.id !== id;\n    });\n    this.setState({\n      list: newList\n    });\n  };\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <p className=\"lead\">\n          <AddForm\n            buttonLabel=\"Add Character\"\n            handleToUpdate={this.handleToUpdate}\n          />\n        </p>\n        <ListContainer\n          list={this.state.list}\n          removeItem={this.removeItem}\n          handleToUpdate={this.handleToUpdate}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}